package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdvisorDefinitionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionAllPropertiesEquals(AdvisorDefinition expected, AdvisorDefinition actual) {
        assertAdvisorDefinitionAutoGeneratedPropertiesEquals(expected, actual);
        assertAdvisorDefinitionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionAllUpdatablePropertiesEquals(AdvisorDefinition expected, AdvisorDefinition actual) {
        assertAdvisorDefinitionUpdatableFieldsEquals(expected, actual);
        assertAdvisorDefinitionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionAutoGeneratedPropertiesEquals(AdvisorDefinition expected, AdvisorDefinition actual) {
        assertThat(expected)
            .as("Verify AdvisorDefinition auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionUpdatableFieldsEquals(AdvisorDefinition expected, AdvisorDefinition actual) {
        assertThat(expected)
            .as("Verify AdvisorDefinition relevant properties")
            .satisfies(e -> assertThat(e.getCaption()).as("check caption").isEqualTo(actual.getCaption()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCountryIsoCode()).as("check countryIsoCode").isEqualTo(actual.getCountryIsoCode()))
            .satisfies(e -> assertThat(e.getDepositNum()).as("check depositNum").isEqualTo(actual.getDepositNum()))
            .satisfies(e -> assertThat(e.getSwiftCode()).as("check swiftCode").isEqualTo(actual.getSwiftCode()))
            .satisfies(e -> assertThat(e.getCreditDate()).as("check creditDate").isEqualTo(actual.getCreditDate()))
            .satisfies(e -> assertThat(e.getBankCode()).as("check bankCode").isEqualTo(actual.getBankCode()))
            .satisfies(e -> assertThat(e.getBranchCode()).as("check branchCode").isEqualTo(actual.getBranchCode()))
            .satisfies(
                e -> assertThat(e.getDefaultCurrencyCode()).as("check defaultCurrencyCode").isEqualTo(actual.getDefaultCurrencyCode())
            )
            .satisfies(e -> assertThat(e.getCountryCode()).as("check countryCode").isEqualTo(actual.getCountryCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionUpdatableRelationshipsEquals(AdvisorDefinition expected, AdvisorDefinition actual) {
        assertThat(expected)
            .as("Verify AdvisorDefinition relationships")
            .satisfies(e -> assertThat(e.getAdvisingBank()).as("check advisingBank").isEqualTo(actual.getAdvisingBank()))
            .satisfies(
                e -> assertThat(e.getInterfaceAdvisingBank()).as("check interfaceAdvisingBank").isEqualTo(actual.getInterfaceAdvisingBank())
            )
            .satisfies(e -> assertThat(e.getCoveringBank()).as("check coveringBank").isEqualTo(actual.getCoveringBank()));
    }
}
