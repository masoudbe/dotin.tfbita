package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdvisorDefinitionDepositAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionDepositAllPropertiesEquals(
        AdvisorDefinitionDeposit expected,
        AdvisorDefinitionDeposit actual
    ) {
        assertAdvisorDefinitionDepositAutoGeneratedPropertiesEquals(expected, actual);
        assertAdvisorDefinitionDepositAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionDepositAllUpdatablePropertiesEquals(
        AdvisorDefinitionDeposit expected,
        AdvisorDefinitionDeposit actual
    ) {
        assertAdvisorDefinitionDepositUpdatableFieldsEquals(expected, actual);
        assertAdvisorDefinitionDepositUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionDepositAutoGeneratedPropertiesEquals(
        AdvisorDefinitionDeposit expected,
        AdvisorDefinitionDeposit actual
    ) {
        assertThat(expected)
            .as("Verify AdvisorDefinitionDeposit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionDepositUpdatableFieldsEquals(
        AdvisorDefinitionDeposit expected,
        AdvisorDefinitionDeposit actual
    ) {
        assertThat(expected)
            .as("Verify AdvisorDefinitionDeposit relevant properties")
            .satisfies(
                e -> assertThat(e.getAdvisorDepositNumber()).as("check advisorDepositNumber").isEqualTo(actual.getAdvisorDepositNumber())
            )
            .satisfies(
                e -> assertThat(e.getDefaultAdvisorDeposit()).as("check defaultAdvisorDeposit").isEqualTo(actual.getDefaultAdvisorDeposit())
            )
            .satisfies(e -> assertThat(e.getDepositNum()).as("check depositNum").isEqualTo(actual.getDepositNum()))
            .satisfies(e -> assertThat(e.getSwiftCode()).as("check swiftCode").isEqualTo(actual.getSwiftCode()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdvisorDefinitionDepositUpdatableRelationshipsEquals(
        AdvisorDefinitionDeposit expected,
        AdvisorDefinitionDeposit actual
    ) {
        assertThat(expected)
            .as("Verify AdvisorDefinitionDeposit relationships")
            .satisfies(e -> assertThat(e.getDepositType()).as("check depositType").isEqualTo(actual.getDepositType()))
            .satisfies(e -> assertThat(e.getAdvisorDefinition()).as("check advisorDefinition").isEqualTo(actual.getAdvisorDefinition()));
    }
}
