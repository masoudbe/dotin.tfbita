package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AuditCompanyInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditCompanyInfoAllPropertiesEquals(AuditCompanyInfo expected, AuditCompanyInfo actual) {
        assertAuditCompanyInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertAuditCompanyInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditCompanyInfoAllUpdatablePropertiesEquals(AuditCompanyInfo expected, AuditCompanyInfo actual) {
        assertAuditCompanyInfoUpdatableFieldsEquals(expected, actual);
        assertAuditCompanyInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditCompanyInfoAutoGeneratedPropertiesEquals(AuditCompanyInfo expected, AuditCompanyInfo actual) {
        assertThat(expected)
            .as("Verify AuditCompanyInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditCompanyInfoUpdatableFieldsEquals(AuditCompanyInfo expected, AuditCompanyInfo actual) {
        assertThat(expected)
            .as("Verify AuditCompanyInfo relevant properties")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getBarCodes()).as("check barCodes").isEqualTo(actual.getBarCodes()))
            .satisfies(e -> assertThat(e.getDateOfRegistration()).as("check dateOfRegistration").isEqualTo(actual.getDateOfRegistration()))
            .satisfies(e -> assertThat(e.getFax()).as("check fax").isEqualTo(actual.getFax()))
            .satisfies(e -> assertThat(e.getFloor()).as("check floor").isEqualTo(actual.getFloor()))
            .satisfies(
                e ->
                    assertThat(e.getInernationalobserviation())
                        .as("check inernationalobserviation")
                        .isEqualTo(actual.getInernationalobserviation())
            )
            .satisfies(e -> assertThat(e.getMainStreet()).as("check mainStreet").isEqualTo(actual.getMainStreet()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getPlaque()).as("check plaque").isEqualTo(actual.getPlaque()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getRegistrationNumber()).as("check registrationNumber").isEqualTo(actual.getRegistrationNumber()))
            .satisfies(e -> assertThat(e.getTelephone()).as("check telephone").isEqualTo(actual.getTelephone()))
            .satisfies(e -> assertThat(e.getTempId()).as("check tempId").isEqualTo(actual.getTempId()))
            .satisfies(e -> assertThat(e.getTheSideStreet()).as("check theSideStreet").isEqualTo(actual.getTheSideStreet()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getCityCode()).as("check cityCode").isEqualTo(actual.getCityCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditCompanyInfoUpdatableRelationshipsEquals(AuditCompanyInfo expected, AuditCompanyInfo actual) {}
}
