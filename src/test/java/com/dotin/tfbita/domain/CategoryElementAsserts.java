package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CategoryElementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCategoryElementAllPropertiesEquals(CategoryElement expected, CategoryElement actual) {
        assertCategoryElementAutoGeneratedPropertiesEquals(expected, actual);
        assertCategoryElementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCategoryElementAllUpdatablePropertiesEquals(CategoryElement expected, CategoryElement actual) {
        assertCategoryElementUpdatableFieldsEquals(expected, actual);
        assertCategoryElementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCategoryElementAutoGeneratedPropertiesEquals(CategoryElement expected, CategoryElement actual) {
        assertThat(expected)
            .as("Verify CategoryElement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCategoryElementUpdatableFieldsEquals(CategoryElement expected, CategoryElement actual) {
        assertThat(expected)
            .as("Verify CategoryElement relevant properties")
            .satisfies(e -> assertThat(e.getValue()).as("check value").isEqualTo(actual.getValue()))
            .satisfies(e -> assertThat(e.getCategoryName()).as("check categoryName").isEqualTo(actual.getCategoryName()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCategoryElementUpdatableRelationshipsEquals(CategoryElement expected, CategoryElement actual) {
        assertThat(expected)
            .as("Verify CategoryElement relationships")
            .satisfies(e -> assertThat(e.getOrderRegType()).as("check orderRegType").isEqualTo(actual.getOrderRegType()))
            .satisfies(e -> assertThat(e.getRequestType()).as("check requestType").isEqualTo(actual.getRequestType()))
            .satisfies(e -> assertThat(e.getImportType()).as("check importType").isEqualTo(actual.getImportType()))
            .satisfies(e -> assertThat(e.getOperationTyp()).as("check operationTyp").isEqualTo(actual.getOperationTyp()))
            .satisfies(
                e -> assertThat(e.getCurrencyProvisionType()).as("check currencyProvisionType").isEqualTo(actual.getCurrencyProvisionType())
            )
            .satisfies(e -> assertThat(e.getPaymentTool()).as("check paymentTool").isEqualTo(actual.getPaymentTool()))
            .satisfies(e -> assertThat(e.getActivityType()).as("check activityType").isEqualTo(actual.getActivityType()))
            .satisfies(e -> assertThat(e.getOwnerType()).as("check ownerType").isEqualTo(actual.getOwnerType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e -> assertThat(e.getExternalCustomerType()).as("check externalCustomerType").isEqualTo(actual.getExternalCustomerType())
            )
            .satisfies(e -> assertThat(e.getTransportType()).as("check transportType").isEqualTo(actual.getTransportType()))
            .satisfies(e -> assertThat(e.getCurrencySupplier()).as("check currencySupplier").isEqualTo(actual.getCurrencySupplier()))
            .satisfies(e -> assertThat(e.getStatusPurchase()).as("check statusPurchase").isEqualTo(actual.getStatusPurchase()))
            .satisfies(
                e -> assertThat(e.getTransportVehicleType()).as("check transportVehicleType").isEqualTo(actual.getTransportVehicleType())
            );
    }
}
