package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomAllPropertiesEquals(Custom expected, Custom actual) {
        assertCustomAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomAllUpdatablePropertiesEquals(Custom expected, Custom actual) {
        assertCustomUpdatableFieldsEquals(expected, actual);
        assertCustomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomAutoGeneratedPropertiesEquals(Custom expected, Custom actual) {
        assertThat(expected)
            .as("Verify Custom auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomUpdatableFieldsEquals(Custom expected, Custom actual) {
        assertThat(expected)
            .as("Verify Custom relevant properties")
            .satisfies(e -> assertThat(e.getModificationDate()).as("check modificationDate").isEqualTo(actual.getModificationDate()))
            .satisfies(e -> assertThat(e.getLatinName()).as("check latinName").isEqualTo(actual.getLatinName()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getTempId()).as("check tempId").isEqualTo(actual.getTempId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomUpdatableRelationshipsEquals(Custom expected, Custom actual) {}
}
