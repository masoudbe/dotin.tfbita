package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTransactionAllPropertiesEquals(DocumentTransaction expected, DocumentTransaction actual) {
        assertDocumentTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTransactionAllUpdatablePropertiesEquals(DocumentTransaction expected, DocumentTransaction actual) {
        assertDocumentTransactionUpdatableFieldsEquals(expected, actual);
        assertDocumentTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTransactionAutoGeneratedPropertiesEquals(DocumentTransaction expected, DocumentTransaction actual) {
        assertThat(expected)
            .as("Verify DocumentTransaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTransactionUpdatableFieldsEquals(DocumentTransaction expected, DocumentTransaction actual) {
        assertThat(expected)
            .as("Verify DocumentTransaction relevant properties")
            .satisfies(
                e -> assertThat(e.getCurrencyExchangeCode()).as("check currencyExchangeCode").isEqualTo(actual.getCurrencyExchangeCode())
            )
            .satisfies(e -> assertThat(e.getTransactionCode()).as("check transactionCode").isEqualTo(actual.getTransactionCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTransactionUpdatableRelationshipsEquals(DocumentTransaction expected, DocumentTransaction actual) {
        assertThat(expected)
            .as("Verify DocumentTransaction relationships")
            .satisfies(
                e ->
                    assertThat(e.getOtherDocumentTransactionsContainer())
                        .as("check otherDocumentTransactionsContainer")
                        .isEqualTo(actual.getOtherDocumentTransactionsContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getCanceledJustificationDocumentContainer())
                        .as("check canceledJustificationDocumentContainer")
                        .isEqualTo(actual.getCanceledJustificationDocumentContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getJustificationDocumentTransactionsContainer())
                        .as("check justificationDocumentTransactionsContainer")
                        .isEqualTo(actual.getJustificationDocumentTransactionsContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getReceivedCommisionsContainer())
                        .as("check receivedCommisionsContainer")
                        .isEqualTo(actual.getReceivedCommisionsContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getCanceledDocumentTransactionsContainer())
                        .as("check canceledDocumentTransactionsContainer")
                        .isEqualTo(actual.getCanceledDocumentTransactionsContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getReturnedDefaultCurrencyCostsContainer())
                        .as("check returnedDefaultCurrencyCostsContainer")
                        .isEqualTo(actual.getReturnedDefaultCurrencyCostsContainer())
            )
            .satisfies(
                e ->
                    assertThat(e.getDefaultCurrencyCostsDocumentContainer())
                        .as("check defaultCurrencyCostsDocumentContainer")
                        .isEqualTo(actual.getDefaultCurrencyCostsDocumentContainer())
            )
            .satisfies(
                e -> assertThat(e.getCustomJustifications()).as("check customJustifications").isEqualTo(actual.getCustomJustifications())
            );
    }
}
