package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftAllPropertiesEquals(Draft expected, Draft actual) {
        assertDraftAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftAllUpdatablePropertiesEquals(Draft expected, Draft actual) {
        assertDraftUpdatableFieldsEquals(expected, actual);
        assertDraftUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftAutoGeneratedPropertiesEquals(Draft expected, Draft actual) {
        assertThat(expected)
            .as("Verify Draft auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUpdatableFieldsEquals(Draft expected, Draft actual) {
        assertThat(expected)
            .as("Verify Draft relevant properties")
            .satisfies(
                e -> assertThat(e.getAdvisorDepositNumber()).as("check advisorDepositNumber").isEqualTo(actual.getAdvisorDepositNumber())
            )
            .satisfies(
                e -> assertThat(e.getAdvisorRequestDeleted()).as("check advisorRequestDeleted").isEqualTo(actual.getAdvisorRequestDeleted())
            )
            .satisfies(
                e ->
                    assertThat(e.getAuditCost()).as("check auditCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAuditCost())
            )
            .satisfies(e -> assertThat(e.getBeneficiaryInfo()).as("check beneficiaryInfo").isEqualTo(actual.getBeneficiaryInfo()))
            .satisfies(
                e ->
                    assertThat(e.getBranchStampCost())
                        .as("check branchStampCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBranchStampCost())
            )
            .satisfies(e -> assertThat(e.getCentralBankCode()).as("check centralBankCode").isEqualTo(actual.getCentralBankCode()))
            .satisfies(
                e ->
                    assertThat(e.getCentralBankCodeReference())
                        .as("check centralBankCodeReference")
                        .isEqualTo(actual.getCentralBankCodeReference())
            )
            .satisfies(
                e ->
                    assertThat(e.getChargedExchangeBrokerAmount())
                        .as("check chargedExchangeBrokerAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getChargedExchangeBrokerAmount())
            )
            .satisfies(e -> assertThat(e.getCharterAcceptable()).as("check charterAcceptable").isEqualTo(actual.getCharterAcceptable()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getCompletionDate()).as("check completionDate").isEqualTo(actual.getCompletionDate()))
            .satisfies(
                e ->
                    assertThat(e.getCoveringBankDepositNumber())
                        .as("check coveringBankDepositNumber")
                        .isEqualTo(actual.getCoveringBankDepositNumber())
            )
            .satisfies(
                e ->
                    assertThat(e.getCurrencyExchangeDepositNumber())
                        .as("check currencyExchangeDepositNumber")
                        .isEqualTo(actual.getCurrencyExchangeDepositNumber())
            )
            .satisfies(
                e -> assertThat(e.getCustomerDepositNumber()).as("check customerDepositNumber").isEqualTo(actual.getCustomerDepositNumber())
            )
            .satisfies(e -> assertThat(e.getDeliverDuration()).as("check deliverDuration").isEqualTo(actual.getDeliverDuration()))
            .satisfies(
                e -> assertThat(e.getDiscount()).as("check discount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDiscount())
            )
            .satisfies(e -> assertThat(e.getDraftNumber()).as("check draftNumber").isEqualTo(actual.getDraftNumber()))
            .satisfies(
                e ->
                    assertThat(e.getDraftOrderRegProductWorth())
                        .as("check draftOrderRegProductWorth")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDraftOrderRegProductWorth())
            )
            .satisfies(
                e ->
                    assertThat(e.getDraftOrderRegServiceWorth())
                        .as("check draftOrderRegServiceWorth")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDraftOrderRegServiceWorth())
            )
            .satisfies(
                e ->
                    assertThat(e.getDraftOrderRegTotalWorth())
                        .as("check draftOrderRegTotalWorth")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDraftOrderRegTotalWorth())
            )
            .satisfies(
                e ->
                    assertThat(e.getDraftOtherCost())
                        .as("check draftOtherCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDraftOtherCost())
            )
            .satisfies(
                e ->
                    assertThat(e.getHasTransportJustification())
                        .as("check hasTransportJustification")
                        .isEqualTo(actual.getHasTransportJustification())
            )
            .satisfies(
                e ->
                    assertThat(e.getInsuranceCost())
                        .as("check insuranceCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getInsuranceCost())
            )
            .satisfies(e -> assertThat(e.getInsuranceDate()).as("check insuranceDate").isEqualTo(actual.getInsuranceDate()))
            .satisfies(
                e -> assertThat(e.getInsuranceExpiryDate()).as("check insuranceExpiryDate").isEqualTo(actual.getInsuranceExpiryDate())
            )
            .satisfies(e -> assertThat(e.getInsuranceNumber()).as("check insuranceNumber").isEqualTo(actual.getInsuranceNumber()))
            .satisfies(
                e ->
                    assertThat(e.getInterfaceAdvisorDepositNumber())
                        .as("check interfaceAdvisorDepositNumber")
                        .isEqualTo(actual.getInterfaceAdvisorDepositNumber())
            )
            .satisfies(e -> assertThat(e.getIssueDate()).as("check issueDate").isEqualTo(actual.getIssueDate()))
            .satisfies(
                e ->
                    assertThat(e.getIssueDraftCommission())
                        .as("check issueDraftCommission")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIssueDraftCommission())
            )
            .satisfies(e -> assertThat(e.getLastShipmentDate()).as("check lastShipmentDate").isEqualTo(actual.getLastShipmentDate()))
            .satisfies(e -> assertThat(e.getMainCustomerNumber()).as("check mainCustomerNumber").isEqualTo(actual.getMainCustomerNumber()))
            .satisfies(e -> assertThat(e.getMakeCertification()).as("check makeCertification").isEqualTo(actual.getMakeCertification()))
            .satisfies(
                e -> assertThat(e.getMultipleTransportable()).as("check multipleTransportable").isEqualTo(actual.getMultipleTransportable())
            )
            .satisfies(
                e -> assertThat(e.getOrderRegistrationDate()).as("check orderRegistrationDate").isEqualTo(actual.getOrderRegistrationDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getOrderRegistrationExpiryDate())
                        .as("check orderRegistrationExpiryDate")
                        .isEqualTo(actual.getOrderRegistrationExpiryDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getOrderRegistrationNumber())
                        .as("check orderRegistrationNumber")
                        .isEqualTo(actual.getOrderRegistrationNumber())
            )
            .satisfies(
                e ->
                    assertThat(e.getOtherCost()).as("check otherCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getOtherCost())
            )
            .satisfies(
                e ->
                    assertThat(e.getPaymentAmount())
                        .as("check paymentAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPaymentAmount())
            )
            .satisfies(e -> assertThat(e.getPerformaDate()).as("check performaDate").isEqualTo(actual.getPerformaDate()))
            .satisfies(e -> assertThat(e.getPerformaExpiryDate()).as("check performaExpiryDate").isEqualTo(actual.getPerformaExpiryDate()))
            .satisfies(e -> assertThat(e.getPerformaNumber()).as("check performaNumber").isEqualTo(actual.getPerformaNumber()))
            .satisfies(
                e ->
                    assertThat(e.getPostSwiftCost())
                        .as("check postSwiftCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPostSwiftCost())
            )
            .satisfies(
                e ->
                    assertThat(e.getProductSourceChangeable())
                        .as("check productSourceChangeable")
                        .isEqualTo(actual.getProductSourceChangeable())
            )
            .satisfies(
                e -> assertThat(e.getReceiveAllCommission()).as("check receiveAllCommission").isEqualTo(actual.getReceiveAllCommission())
            )
            .satisfies(
                e ->
                    assertThat(e.getRegisterationJustificationAmount())
                        .as("check registerationJustificationAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRegisterationJustificationAmount())
            )
            .satisfies(e -> assertThat(e.getRequestDate()).as("check requestDate").isEqualTo(actual.getRequestDate()))
            .satisfies(e -> assertThat(e.getSanctionSerial()).as("check sanctionSerial").isEqualTo(actual.getSanctionSerial()))
            .satisfies(e -> assertThat(e.getSerial()).as("check serial").isEqualTo(actual.getSerial()))
            .satisfies(
                e ->
                    assertThat(e.getShipmentCost())
                        .as("check shipmentCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getShipmentCost())
            )
            .satisfies(
                e -> assertThat(e.getSourceTransportPlace()).as("check sourceTransportPlace").isEqualTo(actual.getSourceTransportPlace())
            )
            .satisfies(e -> assertThat(e.getSwiftComment()).as("check swiftComment").isEqualTo(actual.getSwiftComment()))
            .satisfies(
                e ->
                    assertThat(e.getTransferAmount())
                        .as("check transferAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTransferAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getTransportVehicleChangeable())
                        .as("check transportVehicleChangeable")
                        .isEqualTo(actual.getTransportVehicleChangeable())
            )
            .satisfies(e -> assertThat(e.getPaymentTool()).as("check paymentTool").isEqualTo(actual.getPaymentTool()))
            .satisfies(
                e -> assertThat(e.getLetterNumberTazirat()).as("check letterNumberTazirat").isEqualTo(actual.getLetterNumberTazirat())
            )
            .satisfies(e -> assertThat(e.getLetterDateTazirat()).as("check letterDateTazirat").isEqualTo(actual.getLetterDateTazirat()))
            .satisfies(e -> assertThat(e.getLoanNumber()).as("check loanNumber").isEqualTo(actual.getLoanNumber()))
            .satisfies(e -> assertThat(e.getIsMigrational()).as("check isMigrational").isEqualTo(actual.getIsMigrational()))
            .satisfies(e -> assertThat(e.getIsNewCertificate()).as("check isNewCertificate").isEqualTo(actual.getIsNewCertificate()))
            .satisfies(e -> assertThat(e.getIsWithoutPayment()).as("check isWithoutPayment").isEqualTo(actual.getIsWithoutPayment()))
            .satisfies(
                e ->
                    assertThat(e.getDestinationCountryCode())
                        .as("check destinationCountryCode")
                        .isEqualTo(actual.getDestinationCountryCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getBeneficiaryCountryCode())
                        .as("check beneficiaryCountryCode")
                        .isEqualTo(actual.getBeneficiaryCountryCode())
            )
            .satisfies(
                e -> assertThat(e.getProducerCountryCode()).as("check producerCountryCode").isEqualTo(actual.getProducerCountryCode())
            )
            .satisfies(e -> assertThat(e.getBranchCode()).as("check branchCode").isEqualTo(actual.getBranchCode()))
            .satisfies(
                e -> assertThat(e.getOperationalBranchCode()).as("check operationalBranchCode").isEqualTo(actual.getOperationalBranchCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getCertificateSenderBranchCode())
                        .as("check certificateSenderBranchCode")
                        .isEqualTo(actual.getCertificateSenderBranchCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getMainAccountCurrencyCode())
                        .as("check mainAccountCurrencyCode")
                        .isEqualTo(actual.getMainAccountCurrencyCode())
            )
            .satisfies(
                e -> assertThat(e.getOrderRegCurrencyCode()).as("check orderRegCurrencyCode").isEqualTo(actual.getOrderRegCurrencyCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getChargedExchangeBrokerCurrency())
                        .as("check chargedExchangeBrokerCurrency")
                        .isEqualTo(actual.getChargedExchangeBrokerCurrency())
            )
            .satisfies(
                e ->
                    assertThat(e.getRegisterationJustificationCurrencyCode())
                        .as("check registerationJustificationCurrencyCode")
                        .isEqualTo(actual.getRegisterationJustificationCurrencyCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getCurrencyExchangeInfoTitle())
                        .as("check currencyExchangeInfoTitle")
                        .isEqualTo(actual.getCurrencyExchangeInfoTitle())
            )
            .satisfies(
                e ->
                    assertThat(e.getTransportationTypeName())
                        .as("check transportationTypeName")
                        .isEqualTo(actual.getTransportationTypeName())
            )
            .satisfies(e -> assertThat(e.getAccountInfoCode()).as("check accountInfoCode").isEqualTo(actual.getAccountInfoCode()))
            .satisfies(e -> assertThat(e.getCustomerNumbers()).as("check customerNumbers").isEqualTo(actual.getCustomerNumbers()))
            .satisfies(e -> assertThat(e.getSanctionSerials()).as("check sanctionSerials").isEqualTo(actual.getSanctionSerials()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUpdatableRelationshipsEquals(Draft expected, Draft actual) {
        assertThat(expected)
            .as("Verify Draft relationships")
            .satisfies(e -> assertThat(e.getCustoms()).as("check customs").isEqualTo(actual.getCustoms()))
            .satisfies(e -> assertThat(e.getProducts()).as("check products").isEqualTo(actual.getProducts()))
            .satisfies(e -> assertThat(e.getServices()).as("check services").isEqualTo(actual.getServices()));
    }
}
