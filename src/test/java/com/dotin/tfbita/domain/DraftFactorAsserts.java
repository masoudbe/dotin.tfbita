package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftFactorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftFactorAllPropertiesEquals(DraftFactor expected, DraftFactor actual) {
        assertDraftFactorAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftFactorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftFactorAllUpdatablePropertiesEquals(DraftFactor expected, DraftFactor actual) {
        assertDraftFactorUpdatableFieldsEquals(expected, actual);
        assertDraftFactorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftFactorAutoGeneratedPropertiesEquals(DraftFactor expected, DraftFactor actual) {
        assertThat(expected)
            .as("Verify DraftFactor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftFactorUpdatableFieldsEquals(DraftFactor expected, DraftFactor actual) {
        assertThat(expected)
            .as("Verify DraftFactor relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e -> assertThat(e.getEqAmount()).as("check eqAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getEqAmount())
            )
            .satisfies(e -> assertThat(e.getFactorDate()).as("check factorDate").isEqualTo(actual.getFactorDate()))
            .satisfies(e -> assertThat(e.getIssueDate()).as("check issueDate").isEqualTo(actual.getIssueDate()))
            .satisfies(e -> assertThat(e.getSerial()).as("check serial").isEqualTo(actual.getSerial()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftFactorUpdatableRelationshipsEquals(DraftFactor expected, DraftFactor actual) {
        assertThat(expected)
            .as("Verify DraftFactor relationships")
            .satisfies(e -> assertThat(e.getDraft()).as("check draft").isEqualTo(actual.getDraft()));
    }
}
