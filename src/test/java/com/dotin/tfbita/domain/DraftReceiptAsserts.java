package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftReceiptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftReceiptAllPropertiesEquals(DraftReceipt expected, DraftReceipt actual) {
        assertDraftReceiptAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftReceiptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftReceiptAllUpdatablePropertiesEquals(DraftReceipt expected, DraftReceipt actual) {
        assertDraftReceiptUpdatableFieldsEquals(expected, actual);
        assertDraftReceiptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftReceiptAutoGeneratedPropertiesEquals(DraftReceipt expected, DraftReceipt actual) {
        assertThat(expected)
            .as("Verify DraftReceipt auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftReceiptUpdatableFieldsEquals(DraftReceipt expected, DraftReceipt actual) {
        assertThat(expected)
            .as("Verify DraftReceipt relevant properties")
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(
                e -> assertThat(e.getCustomerDeliverDate()).as("check customerDeliverDate").isEqualTo(actual.getCustomerDeliverDate())
            )
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getDeleteDate()).as("check deleteDate").isEqualTo(actual.getDeleteDate()))
            .satisfies(e -> assertThat(e.getDeliverDate()).as("check deliverDate").isEqualTo(actual.getDeliverDate()))
            .satisfies(e -> assertThat(e.getDeliverDuration()).as("check deliverDuration").isEqualTo(actual.getDeliverDuration()))
            .satisfies(e -> assertThat(e.getDelivered()).as("check delivered").isEqualTo(actual.getDelivered()))
            .satisfies(
                e ->
                    assertThat(e.getDocumentTransactionEffectiveDate())
                        .as("check documentTransactionEffectiveDate")
                        .isEqualTo(actual.getDocumentTransactionEffectiveDate())
            )
            .satisfies(e -> assertThat(e.getFreightLetterDate()).as("check freightLetterDate").isEqualTo(actual.getFreightLetterDate()))
            .satisfies(
                e -> assertThat(e.getFreightLetterNumber()).as("check freightLetterNumber").isEqualTo(actual.getFreightLetterNumber())
            )
            .satisfies(
                e ->
                    assertThat(e.getFreightLetterStampCost())
                        .as("check freightLetterStampCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFreightLetterStampCost())
            )
            .satisfies(e -> assertThat(e.getIssueDate()).as("check issueDate").isEqualTo(actual.getIssueDate()))
            .satisfies(e -> assertThat(e.getIssueDocument()).as("check issueDocument").isEqualTo(actual.getIssueDocument()))
            .satisfies(
                e ->
                    assertThat(e.getProductAmount())
                        .as("check productAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProductAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getReceiptAmount())
                        .as("check receiptAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getReceiptAmount())
            )
            .satisfies(e -> assertThat(e.getReceiptDate()).as("check receiptDate").isEqualTo(actual.getReceiptDate()))
            .satisfies(e -> assertThat(e.getRow()).as("check row").isEqualTo(actual.getRow()))
            .satisfies(e -> assertThat(e.getSerial()).as("check serial").isEqualTo(actual.getSerial()))
            .satisfies(e -> assertThat(e.getTransportRow()).as("check transportRow").isEqualTo(actual.getTransportRow()))
            .satisfies(e -> assertThat(e.getUsable()).as("check usable").isEqualTo(actual.getUsable()))
            .satisfies(
                e ->
                    assertThat(e.getPaymentCurrencyRateTypeDesc())
                        .as("check paymentCurrencyRateTypeDesc")
                        .isEqualTo(actual.getPaymentCurrencyRateTypeDesc())
            )
            .satisfies(
                e -> assertThat(e.getPaymentItemTypeDesc()).as("check paymentItemTypeDesc").isEqualTo(actual.getPaymentItemTypeDesc())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetWeight()).as("check netWeight").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getNetWeight())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossWeight())
                        .as("check grossWeight")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossWeight())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalNetWeight())
                        .as("check totalNetWeight")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalNetWeight())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalGrossWeight())
                        .as("check totalGrossWeight")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalGrossWeight())
            )
            .satisfies(
                e -> assertThat(e.getLetterNumberTazirat()).as("check letterNumberTazirat").isEqualTo(actual.getLetterNumberTazirat())
            )
            .satisfies(e -> assertThat(e.getLetterDateTazirat()).as("check letterDateTazirat").isEqualTo(actual.getLetterDateTazirat()))
            .satisfies(
                e ->
                    assertThat(e.getFobAmount()).as("check fobAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getFobAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getShippingFare())
                        .as("check shippingFare")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getShippingFare())
            )
            .satisfies(
                e ->
                    assertThat(e.getInspectionCost())
                        .as("check inspectionCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getInspectionCost())
            )
            .satisfies(
                e -> assertThat(e.getDiscount()).as("check discount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDiscount())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeadlineSubmitDocumentDate())
                        .as("check deadlineSubmitDocumentDate")
                        .isEqualTo(actual.getDeadlineSubmitDocumentDate())
            )
            .satisfies(
                e -> assertThat(e.getCurrencyProvisionFile()).as("check currencyProvisionFile").isEqualTo(actual.getCurrencyProvisionFile())
            )
            .satisfies(
                e ->
                    assertThat(e.getCurrencyProvisionFileContentType())
                        .as("check currencyProvisionFile contenty type")
                        .isEqualTo(actual.getCurrencyProvisionFileContentType())
            )
            .satisfies(e -> assertThat(e.getIsMigrational()).as("check isMigrational").isEqualTo(actual.getIsMigrational()))
            .satisfies(
                e ->
                    assertThat(e.getOtherCost()).as("check otherCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getOtherCost())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftReceiptUpdatableRelationshipsEquals(DraftReceipt expected, DraftReceipt actual) {
        assertThat(expected)
            .as("Verify DraftReceipt relationships")
            .satisfies(e -> assertThat(e.getReceipts()).as("check receipts").isEqualTo(actual.getReceipts()))
            .satisfies(
                e ->
                    assertThat(e.getDraftCustomJustifications())
                        .as("check draftCustomJustifications")
                        .isEqualTo(actual.getDraftCustomJustifications())
            );
    }
}
