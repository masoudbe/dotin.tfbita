package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftStatusInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftStatusInfoAllPropertiesEquals(DraftStatusInfo expected, DraftStatusInfo actual) {
        assertDraftStatusInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftStatusInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftStatusInfoAllUpdatablePropertiesEquals(DraftStatusInfo expected, DraftStatusInfo actual) {
        assertDraftStatusInfoUpdatableFieldsEquals(expected, actual);
        assertDraftStatusInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftStatusInfoAutoGeneratedPropertiesEquals(DraftStatusInfo expected, DraftStatusInfo actual) {
        assertThat(expected)
            .as("Verify DraftStatusInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftStatusInfoUpdatableFieldsEquals(DraftStatusInfo expected, DraftStatusInfo actual) {
        assertThat(expected)
            .as("Verify DraftStatusInfo relevant properties")
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(
                e -> assertThat(e.getDraftRequestAccepted()).as("check draftRequestAccepted").isEqualTo(actual.getDraftRequestAccepted())
            )
            .satisfies(e -> assertThat(e.getInsuranceCostPaid()).as("check insuranceCostPaid").isEqualTo(actual.getInsuranceCostPaid()))
            .satisfies(e -> assertThat(e.getIssued()).as("check issued").isEqualTo(actual.getIssued()))
            .satisfies(e -> assertThat(e.getOtherCostsPaid()).as("check otherCostsPaid").isEqualTo(actual.getOtherCostsPaid()))
            .satisfies(e -> assertThat(e.getPostSwiftCostPaied()).as("check postSwiftCostPaied").isEqualTo(actual.getPostSwiftCostPaied()))
            .satisfies(e -> assertThat(e.getRejectDescription()).as("check rejectDescription").isEqualTo(actual.getRejectDescription()))
            .satisfies(
                e ->
                    assertThat(e.getRemainAmount())
                        .as("check remainAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRemainAmount())
            )
            .satisfies(e -> assertThat(e.getStampCostPaid()).as("check stampCostPaid").isEqualTo(actual.getStampCostPaid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftStatusInfoUpdatableRelationshipsEquals(DraftStatusInfo expected, DraftStatusInfo actual) {
        assertThat(expected)
            .as("Verify DraftStatusInfo relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }
}
