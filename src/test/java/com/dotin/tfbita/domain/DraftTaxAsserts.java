package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftTaxAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTaxAllPropertiesEquals(DraftTax expected, DraftTax actual) {
        assertDraftTaxAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftTaxAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTaxAllUpdatablePropertiesEquals(DraftTax expected, DraftTax actual) {
        assertDraftTaxUpdatableFieldsEquals(expected, actual);
        assertDraftTaxUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTaxAutoGeneratedPropertiesEquals(DraftTax expected, DraftTax actual) {
        assertThat(expected)
            .as("Verify DraftTax auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTaxUpdatableFieldsEquals(DraftTax expected, DraftTax actual) {
        assertThat(expected)
            .as("Verify DraftTax relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getOrderRegCurrencyAmount())
                        .as("check orderRegCurrencyAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOrderRegCurrencyAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getMainAccountCurrencyAmount())
                        .as("check mainAccountCurrencyAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMainAccountCurrencyAmount())
            )
            .satisfies(e -> assertThat(e.getLetterNumber()).as("check letterNumber").isEqualTo(actual.getLetterNumber()))
            .satisfies(e -> assertThat(e.getLetterImage()).as("check letterImage").isEqualTo(actual.getLetterImage()))
            .satisfies(
                e ->
                    assertThat(e.getLetterImageContentType())
                        .as("check letterImage contenty type")
                        .isEqualTo(actual.getLetterImageContentType())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getRegistrationDate()).as("check registrationDate").isEqualTo(actual.getRegistrationDate()))
            .satisfies(e -> assertThat(e.getReturnTaxesAmount()).as("check returnTaxesAmount").isEqualTo(actual.getReturnTaxesAmount()))
            .satisfies(
                e ->
                    assertThat(e.getOrderRegRate())
                        .as("check orderRegRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOrderRegRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getMainAccountRate())
                        .as("check mainAccountRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMainAccountRate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTaxUpdatableRelationshipsEquals(DraftTax expected, DraftTax actual) {
        assertThat(expected)
            .as("Verify DraftTax relationships")
            .satisfies(
                e -> assertThat(e.getDocumentTransaction()).as("check documentTransaction").isEqualTo(actual.getDocumentTransaction())
            )
            .satisfies(
                e ->
                    assertThat(e.getReturnDocumentTransaction())
                        .as("check returnDocumentTransaction")
                        .isEqualTo(actual.getReturnDocumentTransaction())
            )
            .satisfies(e -> assertThat(e.getDraft()).as("check draft").isEqualTo(actual.getDraft()));
    }
}
