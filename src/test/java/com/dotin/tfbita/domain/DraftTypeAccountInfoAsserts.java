package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DraftTypeAccountInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeAccountInfoAllPropertiesEquals(DraftTypeAccountInfo expected, DraftTypeAccountInfo actual) {
        assertDraftTypeAccountInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftTypeAccountInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeAccountInfoAllUpdatablePropertiesEquals(DraftTypeAccountInfo expected, DraftTypeAccountInfo actual) {
        assertDraftTypeAccountInfoUpdatableFieldsEquals(expected, actual);
        assertDraftTypeAccountInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeAccountInfoAutoGeneratedPropertiesEquals(DraftTypeAccountInfo expected, DraftTypeAccountInfo actual) {
        assertThat(expected)
            .as("Verify DraftTypeAccountInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeAccountInfoUpdatableFieldsEquals(DraftTypeAccountInfo expected, DraftTypeAccountInfo actual) {
        assertThat(expected)
            .as("Verify DraftTypeAccountInfo relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getSellCurrencyCommissionAccount())
                        .as("check sellCurrencyCommissionAccount")
                        .isEqualTo(actual.getSellCurrencyCommissionAccount())
            )
            .satisfies(
                e -> assertThat(e.getIncomeAccountNumber()).as("check incomeAccountNumber").isEqualTo(actual.getIncomeAccountNumber())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeAccountInfoUpdatableRelationshipsEquals(DraftTypeAccountInfo expected, DraftTypeAccountInfo actual) {}
}
