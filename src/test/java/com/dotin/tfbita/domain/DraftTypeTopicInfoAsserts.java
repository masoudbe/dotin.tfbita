package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DraftTypeTopicInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeTopicInfoAllPropertiesEquals(DraftTypeTopicInfo expected, DraftTypeTopicInfo actual) {
        assertDraftTypeTopicInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftTypeTopicInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeTopicInfoAllUpdatablePropertiesEquals(DraftTypeTopicInfo expected, DraftTypeTopicInfo actual) {
        assertDraftTypeTopicInfoUpdatableFieldsEquals(expected, actual);
        assertDraftTypeTopicInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeTopicInfoAutoGeneratedPropertiesEquals(DraftTypeTopicInfo expected, DraftTypeTopicInfo actual) {
        assertThat(expected)
            .as("Verify DraftTypeTopicInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeTopicInfoUpdatableFieldsEquals(DraftTypeTopicInfo expected, DraftTypeTopicInfo actual) {
        assertThat(expected)
            .as("Verify DraftTypeTopicInfo relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getCurrencySellCommissionTopic())
                        .as("check currencySellCommissionTopic")
                        .isEqualTo(actual.getCurrencySellCommissionTopic())
            )
            .satisfies(
                e ->
                    assertThat(e.getDocumentReceiptDisciplinaryTopic())
                        .as("check documentReceiptDisciplinaryTopic")
                        .isEqualTo(actual.getDocumentReceiptDisciplinaryTopic())
            )
            .satisfies(e -> assertThat(e.getDraftMainTopic()).as("check draftMainTopic").isEqualTo(actual.getDraftMainTopic()))
            .satisfies(e -> assertThat(e.getInsuranceCostTopic()).as("check insuranceCostTopic").isEqualTo(actual.getInsuranceCostTopic()))
            .satisfies(
                e ->
                    assertThat(e.getJustificationDisciplinaryTopic())
                        .as("check justificationDisciplinaryTopic")
                        .isEqualTo(actual.getJustificationDisciplinaryTopic())
            )
            .satisfies(
                e ->
                    assertThat(e.getOpenDraftDisciplinaryTopic())
                        .as("check openDraftDisciplinaryTopic")
                        .isEqualTo(actual.getOpenDraftDisciplinaryTopic())
            )
            .satisfies(e -> assertThat(e.getOtherCostsTopic()).as("check otherCostsTopic").isEqualTo(actual.getOtherCostsTopic()))
            .satisfies(
                e ->
                    assertThat(e.getPostTelegraphSwiftCostsTopic())
                        .as("check postTelegraphSwiftCostsTopic")
                        .isEqualTo(actual.getPostTelegraphSwiftCostsTopic())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftTypeTopicInfoUpdatableRelationshipsEquals(DraftTypeTopicInfo expected, DraftTypeTopicInfo actual) {}
}
