package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DraftUsedAssuranceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUsedAssuranceAllPropertiesEquals(DraftUsedAssurance expected, DraftUsedAssurance actual) {
        assertDraftUsedAssuranceAutoGeneratedPropertiesEquals(expected, actual);
        assertDraftUsedAssuranceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUsedAssuranceAllUpdatablePropertiesEquals(DraftUsedAssurance expected, DraftUsedAssurance actual) {
        assertDraftUsedAssuranceUpdatableFieldsEquals(expected, actual);
        assertDraftUsedAssuranceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUsedAssuranceAutoGeneratedPropertiesEquals(DraftUsedAssurance expected, DraftUsedAssurance actual) {
        assertThat(expected)
            .as("Verify DraftUsedAssurance auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUsedAssuranceUpdatableFieldsEquals(DraftUsedAssurance expected, DraftUsedAssurance actual) {
        assertThat(expected)
            .as("Verify DraftUsedAssurance relevant properties")
            .satisfies(e -> assertThat(e.getAssuranceRateId()).as("check assuranceRateId").isEqualTo(actual.getAssuranceRateId()))
            .satisfies(e -> assertThat(e.getAssuranceSerial()).as("check assuranceSerial").isEqualTo(actual.getAssuranceSerial()))
            .satisfies(
                e ->
                    assertThat(e.getExchangeRate())
                        .as("check exchangeRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getExchangeRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getDefaultCurrencyUsedCost())
                        .as("check defaultCurrencyUsedCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDefaultCurrencyUsedCost())
            )
            .satisfies(
                e -> assertThat(e.getUsedCost()).as("check usedCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUsedCost())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDraftUsedAssuranceUpdatableRelationshipsEquals(DraftUsedAssurance expected, DraftUsedAssurance actual) {
        assertThat(expected)
            .as("Verify DraftUsedAssurance relationships")
            .satisfies(e -> assertThat(e.getUsedAssurances()).as("check usedAssurances").isEqualTo(actual.getUsedAssurances()));
    }
}
