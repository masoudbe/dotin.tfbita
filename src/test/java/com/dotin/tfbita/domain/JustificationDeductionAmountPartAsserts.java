package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class JustificationDeductionAmountPartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJustificationDeductionAmountPartAllPropertiesEquals(
        JustificationDeductionAmountPart expected,
        JustificationDeductionAmountPart actual
    ) {
        assertJustificationDeductionAmountPartAutoGeneratedPropertiesEquals(expected, actual);
        assertJustificationDeductionAmountPartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJustificationDeductionAmountPartAllUpdatablePropertiesEquals(
        JustificationDeductionAmountPart expected,
        JustificationDeductionAmountPart actual
    ) {
        assertJustificationDeductionAmountPartUpdatableFieldsEquals(expected, actual);
        assertJustificationDeductionAmountPartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJustificationDeductionAmountPartAutoGeneratedPropertiesEquals(
        JustificationDeductionAmountPart expected,
        JustificationDeductionAmountPart actual
    ) {
        assertThat(expected)
            .as("Verify JustificationDeductionAmountPart auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJustificationDeductionAmountPartUpdatableFieldsEquals(
        JustificationDeductionAmountPart expected,
        JustificationDeductionAmountPart actual
    ) {
        assertThat(expected)
            .as("Verify JustificationDeductionAmountPart relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getReceiveTransactionCode())
                        .as("check receiveTransactionCode")
                        .isEqualTo(actual.getReceiveTransactionCode())
            )
            .satisfies(
                e -> assertThat(e.getReturnTransactionCode()).as("check returnTransactionCode").isEqualTo(actual.getReturnTransactionCode())
            )
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(
                e ->
                    assertThat(e.getAmountBasedOnRial())
                        .as("check amountBasedOnRial")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAmountBasedOnRial())
            )
            .satisfies(e -> assertThat(e.getDepositNumber()).as("check depositNumber").isEqualTo(actual.getDepositNumber()))
            .satisfies(
                e -> assertThat(e.getReceiveCurrencyCode()).as("check receiveCurrencyCode").isEqualTo(actual.getReceiveCurrencyCode())
            )
            .satisfies(e -> assertThat(e.getCurrencyRateDate()).as("check currencyRateDate").isEqualTo(actual.getCurrencyRateDate()))
            .satisfies(
                e -> assertThat(e.getSellRate()).as("check sellRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSellRate())
            )
            .satisfies(
                e -> assertThat(e.getBuyRate()).as("check buyRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBuyRate())
            )
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJustificationDeductionAmountPartUpdatableRelationshipsEquals(
        JustificationDeductionAmountPart expected,
        JustificationDeductionAmountPart actual
    ) {
        assertThat(expected)
            .as("Verify JustificationDeductionAmountPart relationships")
            .satisfies(
                e ->
                    assertThat(e.getJustificationDeductionAmount())
                        .as("check justificationDeductionAmount")
                        .isEqualTo(actual.getJustificationDeductionAmount())
            );
    }
}
