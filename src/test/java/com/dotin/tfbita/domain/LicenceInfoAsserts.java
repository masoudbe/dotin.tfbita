package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LicenceInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLicenceInfoAllPropertiesEquals(LicenceInfo expected, LicenceInfo actual) {
        assertLicenceInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertLicenceInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLicenceInfoAllUpdatablePropertiesEquals(LicenceInfo expected, LicenceInfo actual) {
        assertLicenceInfoUpdatableFieldsEquals(expected, actual);
        assertLicenceInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLicenceInfoAutoGeneratedPropertiesEquals(LicenceInfo expected, LicenceInfo actual) {
        assertThat(expected)
            .as("Verify LicenceInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLicenceInfoUpdatableFieldsEquals(LicenceInfo expected, LicenceInfo actual) {
        assertThat(expected)
            .as("Verify LicenceInfo relevant properties")
            .satisfies(
                e -> assertThat(e.getOrganizationLicence()).as("check organizationLicence").isEqualTo(actual.getOrganizationLicence())
            )
            .satisfies(e -> assertThat(e.getLicenceNumber()).as("check licenceNumber").isEqualTo(actual.getLicenceNumber()))
            .satisfies(e -> assertThat(e.getLicenceDate()).as("check licenceDate").isEqualTo(actual.getLicenceDate()))
            .satisfies(e -> assertThat(e.getHavingProduct()).as("check havingProduct").isEqualTo(actual.getHavingProduct()))
            .satisfies(e -> assertThat(e.getHavingService()).as("check havingService").isEqualTo(actual.getHavingService()))
            .satisfies(e -> assertThat(e.getCreditDate()).as("check creditDate").isEqualTo(actual.getCreditDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLicenceInfoUpdatableRelationshipsEquals(LicenceInfo expected, LicenceInfo actual) {
        assertThat(expected)
            .as("Verify LicenceInfo relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getOrderRegServ()).as("check orderRegServ").isEqualTo(actual.getOrderRegServ()))
            .satisfies(
                e -> assertThat(e.getOrderRegistrationInfo()).as("check orderRegistrationInfo").isEqualTo(actual.getOrderRegistrationInfo())
            );
    }
}
