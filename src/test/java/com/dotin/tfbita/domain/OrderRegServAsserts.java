package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderRegServAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegServAllPropertiesEquals(OrderRegServ expected, OrderRegServ actual) {
        assertOrderRegServAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderRegServAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegServAllUpdatablePropertiesEquals(OrderRegServ expected, OrderRegServ actual) {
        assertOrderRegServUpdatableFieldsEquals(expected, actual);
        assertOrderRegServUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegServAutoGeneratedPropertiesEquals(OrderRegServ expected, OrderRegServ actual) {
        assertThat(expected)
            .as("Verify OrderRegServ auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegServUpdatableFieldsEquals(OrderRegServ expected, OrderRegServ actual) {
        assertThat(expected)
            .as("Verify OrderRegServ relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(
                e ->
                    assertThat(e.getCurrencyAmount())
                        .as("check currencyAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCurrencyAmount())
            )
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegServUpdatableRelationshipsEquals(OrderRegServ expected, OrderRegServ actual) {
        assertThat(expected)
            .as("Verify OrderRegServ relationships")
            .satisfies(e -> assertThat(e.getOrderRegService()).as("check orderRegService").isEqualTo(actual.getOrderRegService()));
    }
}
