package com.dotin.tfbita.domain;

import static com.dotin.tfbita.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderRegistrationInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegistrationInfoAllPropertiesEquals(OrderRegistrationInfo expected, OrderRegistrationInfo actual) {
        assertOrderRegistrationInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderRegistrationInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegistrationInfoAllUpdatablePropertiesEquals(
        OrderRegistrationInfo expected,
        OrderRegistrationInfo actual
    ) {
        assertOrderRegistrationInfoUpdatableFieldsEquals(expected, actual);
        assertOrderRegistrationInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegistrationInfoAutoGeneratedPropertiesEquals(
        OrderRegistrationInfo expected,
        OrderRegistrationInfo actual
    ) {
        assertThat(expected)
            .as("Verify OrderRegistrationInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegistrationInfoUpdatableFieldsEquals(OrderRegistrationInfo expected, OrderRegistrationInfo actual) {
        assertThat(expected)
            .as("Verify OrderRegistrationInfo relevant properties")
            .satisfies(e -> assertThat(e.getOrderRegNum()).as("check orderRegNum").isEqualTo(actual.getOrderRegNum()))
            .satisfies(e -> assertThat(e.getStartOrderRegDate()).as("check startOrderRegDate").isEqualTo(actual.getStartOrderRegDate()))
            .satisfies(e -> assertThat(e.getEndOrderRegDate()).as("check endOrderRegDate").isEqualTo(actual.getEndOrderRegDate()))
            .satisfies(e -> assertThat(e.getRequestNumber()).as("check requestNumber").isEqualTo(actual.getRequestNumber()))
            .satisfies(e -> assertThat(e.getBankCode()).as("check bankCode").isEqualTo(actual.getBankCode()))
            .satisfies(e -> assertThat(e.getBranchCode()).as("check branchCode").isEqualTo(actual.getBranchCode()))
            .satisfies(e -> assertThat(e.getCustomerNumber()).as("check customerNumber").isEqualTo(actual.getCustomerNumber()))
            .satisfies(
                e -> assertThat(e.getApplicantNationalcode()).as("check applicantNationalcode").isEqualTo(actual.getApplicantNationalcode())
            )
            .satisfies(e -> assertThat(e.getPerformaNumber()).as("check performaNumber").isEqualTo(actual.getPerformaNumber()))
            .satisfies(e -> assertThat(e.getPerformaDate()).as("check performaDate").isEqualTo(actual.getPerformaDate()))
            .satisfies(e -> assertThat(e.getPerformaExpiryDate()).as("check performaExpiryDate").isEqualTo(actual.getPerformaExpiryDate()))
            .satisfies(
                e -> assertThat(e.getPerformaDatePersian()).as("check performaDatePersian").isEqualTo(actual.getPerformaDatePersian())
            )
            .satisfies(
                e ->
                    assertThat(e.getPerformaExpiryDatePersian())
                        .as("check performaExpiryDatePersian")
                        .isEqualTo(actual.getPerformaExpiryDatePersian())
            )
            .satisfies(e -> assertThat(e.getInfoSubmissionDate()).as("check infoSubmissionDate").isEqualTo(actual.getInfoSubmissionDate()))
            .satisfies(e -> assertThat(e.getSellerName()).as("check sellerName").isEqualTo(actual.getSellerName()))
            .satisfies(
                e ->
                    assertThat(e.getBeneficiaryCountryCode())
                        .as("check beneficiaryCountryCode")
                        .isEqualTo(actual.getBeneficiaryCountryCode())
            )
            .satisfies(
                e -> assertThat(e.getProducerCountriesCode()).as("check producerCountriesCode").isEqualTo(actual.getProducerCountriesCode())
            )
            .satisfies(e -> assertThat(e.getSourceCountry()).as("check sourceCountry").isEqualTo(actual.getSourceCountry()))
            .satisfies(
                e -> assertThat(e.getMultipleTransportable()).as("check multipleTransportable").isEqualTo(actual.getMultipleTransportable())
            )
            .satisfies(
                e -> assertThat(e.getDeliveryTimeOfGoods()).as("check deliveryTimeOfGoods").isEqualTo(actual.getDeliveryTimeOfGoods())
            )
            .satisfies(e -> assertThat(e.getTotalWeightInKg()).as("check totalWeightInKg").isEqualTo(actual.getTotalWeightInKg()))
            .satisfies(
                e -> assertThat(e.getPossibilityCarrying()).as("check possibilityCarrying").isEqualTo(actual.getPossibilityCarrying())
            )
            .satisfies(
                e -> assertThat(e.getPossibilityClearance()).as("check possibilityClearance").isEqualTo(actual.getPossibilityClearance())
            )
            .satisfies(
                e ->
                    assertThat(e.getAbleAddServiceInProductOrder())
                        .as("check ableAddServiceInProductOrder")
                        .isEqualTo(actual.getAbleAddServiceInProductOrder())
            )
            .satisfies(e -> assertThat(e.getFreeZone()).as("check freeZone").isEqualTo(actual.getFreeZone()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()))
            .satisfies(
                e ->
                    assertThat(e.getFobAmount()).as("check fobAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getFobAmount())
            )
            .satisfies(
                e -> assertThat(e.getDiscount()).as("check discount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDiscount())
            )
            .satisfies(
                e ->
                    assertThat(e.getShipmentCost())
                        .as("check shipmentCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getShipmentCost())
            )
            .satisfies(
                e -> assertThat(e.getOthrCost()).as("check othrCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getOthrCost())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalAmount())
                        .as("check totalAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalAmount())
            )
            .satisfies(e -> assertThat(e.getIsFile()).as("check isFile").isEqualTo(actual.getIsFile()))
            .satisfies(e -> assertThat(e.getFileNumber()).as("check fileNumber").isEqualTo(actual.getFileNumber()))
            .satisfies(e -> assertThat(e.getExtended()).as("check extended").isEqualTo(actual.getExtended()))
            .satisfies(e -> assertThat(e.getUpdated()).as("check updated").isEqualTo(actual.getUpdated()))
            .satisfies(
                e -> assertThat(e.getGenerateFromService()).as("check generateFromService").isEqualTo(actual.getGenerateFromService())
            )
            .satisfies(e -> assertThat(e.getCertificateNumber()).as("check certificateNumber").isEqualTo(actual.getCertificateNumber()))
            .satisfies(e -> assertThat(e.getCentralBankCode()).as("check centralBankCode").isEqualTo(actual.getCentralBankCode()))
            .satisfies(e -> assertThat(e.getIsMigrational()).as("check isMigrational").isEqualTo(actual.getIsMigrational()))
            .satisfies(e -> assertThat(e.getExternalCustomer()).as("check externalCustomer").isEqualTo(actual.getExternalCustomer()))
            .satisfies(
                e -> assertThat(e.getSumRedemptionDuration()).as("check sumRedemptionDuration").isEqualTo(actual.getSumRedemptionDuration())
            )
            .satisfies(e -> assertThat(e.getExtendedDayNumber()).as("check extendedDayNumber").isEqualTo(actual.getExtendedDayNumber()))
            .satisfies(
                e -> assertThat(e.getMainGroupProductCode()).as("check mainGroupProductCode").isEqualTo(actual.getMainGroupProductCode())
            )
            .satisfies(e -> assertThat(e.getProducerCountries()).as("check producerCountries").isEqualTo(actual.getProducerCountries()))
            .satisfies(e -> assertThat(e.getExcelFile()).as("check excelFile").isEqualTo(actual.getExcelFile()))
            .satisfies(
                e -> assertThat(e.getExcelFileContentType()).as("check excelFile contenty type").isEqualTo(actual.getExcelFileContentType())
            )
            .satisfies(
                e ->
                    assertThat(e.getCommissionTransactionNumber())
                        .as("check commissionTransactionNumber")
                        .isEqualTo(actual.getCommissionTransactionNumber())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderRegistrationInfoUpdatableRelationshipsEquals(
        OrderRegistrationInfo expected,
        OrderRegistrationInfo actual
    ) {
        assertThat(expected)
            .as("Verify OrderRegistrationInfo relationships")
            .satisfies(e -> assertThat(e.getOrderRegType()).as("check orderRegType").isEqualTo(actual.getOrderRegType()))
            .satisfies(e -> assertThat(e.getRequestType()).as("check requestType").isEqualTo(actual.getRequestType()))
            .satisfies(e -> assertThat(e.getImportType()).as("check importType").isEqualTo(actual.getImportType()))
            .satisfies(e -> assertThat(e.getOperationType()).as("check operationType").isEqualTo(actual.getOperationType()))
            .satisfies(
                e -> assertThat(e.getCurrencyProvisionType()).as("check currencyProvisionType").isEqualTo(actual.getCurrencyProvisionType())
            )
            .satisfies(e -> assertThat(e.getPaymentTool()).as("check paymentTool").isEqualTo(actual.getPaymentTool()))
            .satisfies(e -> assertThat(e.getActivityType()).as("check activityType").isEqualTo(actual.getActivityType()))
            .satisfies(e -> assertThat(e.getOwnerType()).as("check ownerType").isEqualTo(actual.getOwnerType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e -> assertThat(e.getExternalCustomerType()).as("check externalCustomerType").isEqualTo(actual.getExternalCustomerType())
            )
            .satisfies(e -> assertThat(e.getTransportType()).as("check transportType").isEqualTo(actual.getTransportType()))
            .satisfies(e -> assertThat(e.getDestCoustomers()).as("check destCoustomers").isEqualTo(actual.getDestCoustomers()))
            .satisfies(e -> assertThat(e.getCargoPlaceCustoms()).as("check cargoPlaceCustoms").isEqualTo(actual.getCargoPlaceCustoms()))
            .satisfies(e -> assertThat(e.getEntranceBorders()).as("check entranceBorders").isEqualTo(actual.getEntranceBorders()))
            .satisfies(
                e -> assertThat(e.getTransportVehicleTypes()).as("check transportVehicleTypes").isEqualTo(actual.getTransportVehicleTypes())
            )
            .satisfies(e -> assertThat(e.getProductInfos()).as("check productInfos").isEqualTo(actual.getProductInfos()))
            .satisfies(
                e ->
                    assertThat(e.getCommissionTransactionNumbers())
                        .as("check commissionTransactionNumbers")
                        .isEqualTo(actual.getCommissionTransactionNumbers())
            );
    }
}
