package com.dotin.tfbita.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SwiftBicAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSwiftBicAllPropertiesEquals(SwiftBic expected, SwiftBic actual) {
        assertSwiftBicAutoGeneratedPropertiesEquals(expected, actual);
        assertSwiftBicAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSwiftBicAllUpdatablePropertiesEquals(SwiftBic expected, SwiftBic actual) {
        assertSwiftBicUpdatableFieldsEquals(expected, actual);
        assertSwiftBicUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSwiftBicAutoGeneratedPropertiesEquals(SwiftBic expected, SwiftBic actual) {
        assertThat(expected)
            .as("Verify SwiftBic auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSwiftBicUpdatableFieldsEquals(SwiftBic expected, SwiftBic actual) {
        assertThat(expected)
            .as("Verify SwiftBic relevant properties")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getAddress2()).as("check address2").isEqualTo(actual.getAddress2()))
            .satisfies(e -> assertThat(e.getAddress3()).as("check address3").isEqualTo(actual.getAddress3()))
            .satisfies(e -> assertThat(e.getAddress4()).as("check address4").isEqualTo(actual.getAddress4()))
            .satisfies(e -> assertThat(e.getBank()).as("check bank").isEqualTo(actual.getBank()))
            .satisfies(e -> assertThat(e.getBankName()).as("check bankName").isEqualTo(actual.getBankName()))
            .satisfies(e -> assertThat(e.getBankName2()).as("check bankName2").isEqualTo(actual.getBankName2()))
            .satisfies(e -> assertThat(e.getBankName3()).as("check bankName3").isEqualTo(actual.getBankName3()))
            .satisfies(e -> assertThat(e.getBranch()).as("check branch").isEqualTo(actual.getBranch()))
            .satisfies(e -> assertThat(e.getBranchName()).as("check branchName").isEqualTo(actual.getBranchName()))
            .satisfies(e -> assertThat(e.getBranchName2()).as("check branchName2").isEqualTo(actual.getBranchName2()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getSubTypeIndicator()).as("check subTypeIndicator").isEqualTo(actual.getSubTypeIndicator()))
            .satisfies(e -> assertThat(e.getZip()).as("check zip").isEqualTo(actual.getZip()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSwiftBicUpdatableRelationshipsEquals(SwiftBic expected, SwiftBic actual) {}
}
